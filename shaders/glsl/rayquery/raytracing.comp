#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_scalar_block_layout : enable

// Morton 
#define WORKGROUP_SIZE 1024
#define RADIX_SORT_BINS 256
#define MAX_UINT 0xFFFFFFFF

layout (local_size_x = WORKGROUP_SIZE, local_size_y = 1) in;

// Binding 0: Shader storage buffer for the vertert
layout(binding =0, scalar) buffer QueryBuffer {
   vec3 queries[];
};

// Binding 1: Top-level acceleration structure
layout(binding =1) uniform accelerationStructureEXT topLevelAS;

// Binding 2: Shader storage buffer for the normal
layout(binding =2, scalar) buffer NormalBuffer {
   vec3 normals[];
};

layout(binding =3, scalar) buffer PointBuffer {
   vec3 points[];
};

const int order = 2;
const float radius=5.0;
const int maxresult = 400;
const int nr_coeff = (order + 1) * (order + 2) / 2;
const int Matirxn = nr_coeff * (nr_coeff + 1) / 2;
float P_weight_Pt[nr_coeff * nr_coeff];
float c_vec[nr_coeff];
shared vec3 localMin;
shared vec3 localMax;

struct SymmetricMatrix {
    float data[Matirxn];
    int n;
};

SymmetricMatrix mat;

void initSymmetricMatrix(int n) {
    mat.n = n;
    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            mat.data[i * n - i * (i - 1) / 2 + j - i] = P_weight_Pt[i * n + j];
        }
    }
}

float  getElement(int i, int j) {
    if (i > j) {
        int temp = i;
        i = j;
        j = temp;
    }
    int index = i * mat.n - i * (i - 1) / 2 + j - i;
    return mat.data[index];
}

void setElement(int i, int j, float value) {
    if (i > j) {
        int temp = i;
        i = j;
        j = temp;
    }
    int index = i * mat.n - i * (i - 1) / 2 + j - i;
    mat.data[index] = value;
}


bool llt() {
    int n = mat.n;
    for (int k = 0; k < n; ++k) {
        float Akk =  getElement(k, k);
		if(Akk<=0.0)return false;
        setElement( k, k, sqrt(Akk));        
        for (int i = k + 1; i < n; ++i) {
            float value =  getElement(i, k) /  getElement(k, k);
            setElement(i, k, value);
		}
		for(int i=k+1;i<n;++i){
			for (int j = k + 1; j <= i; ++j) {
				float value =  getElement(i, j) - getElement(i, k)  *  getElement(j, k);
				setElement(i, j, value);
			}
        }
    }
    return true;
}

void solveInPlace() {
    int n = mat.n; 
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
            c_vec[i] -=  getElement(i, j) * c_vec[j];
        }
        c_vec[i] /=  getElement(i, i);
    }
    for (int i = n - 1; i >= 0; --i) {
        for (int j = i + 1; j < n; ++j) {
            c_vec[i] -=  getElement(j, i) * c_vec[j]; 
        }
        c_vec[i] /=  getElement(i, i);
    }
}

float weight_func(float sq_dist,float search_radius) { 
	return exp(-sq_dist / search_radius / search_radius); 
}

void swap(inout float a, inout float b) {
    float c = a;
    a = b;
    b = c;
}

void swap(inout int a, inout int b) {
    int c = a;
    a = b;
    b = c;
}

vec3 normalized(vec3 v)
{
	float invLen = 1.0f / sqrt(dot(v, v));
    return v * invLen;
}

void computeRoots2(float b,  float c, inout vec3 roots)
{
	roots.x = 0.f;
	float d = b * b - 4.f * c;
	if (d < 0.f)
		d = 0.f;
	float sd = sqrt(d);
	roots.z = 0.5f * (-b + sd);
	roots.y = 0.5f * (-b - sd);
}

void computeRoots3(float c0, float c1, float c2,inout vec3 roots)
{
	if (c0 == 0)
	{
		computeRoots2(c2, c1, roots);
	}
	else
	{
		const float s_inv3 = 1.f / 3.f;
		const float s_sqrt3 = sqrt(3.f);
		float c2_over_3 = c2 * s_inv3;
		float a_over_3 = (c1 - c2 * c2_over_3) * s_inv3;
		if (a_over_3 > 0.f)
			a_over_3 = 0.f;

		float half_b = 0.5f * (c0 + c2_over_3 * (2.f * c2_over_3 * c2_over_3 - c1));

		float q = half_b * half_b + a_over_3 * a_over_3 * a_over_3;
		if (q > 0.f)
			q = 0.f;
		float rho = sqrt(-a_over_3);
		float theta = atan(sqrt(-q), half_b) * s_inv3;
		float cos_theta = cos(theta);
		float sin_theta = sin(theta);
		roots.x = c2_over_3 + 2.f * rho * cos_theta;
		roots.y = c2_over_3 - rho * (cos_theta + s_sqrt3 * sin_theta);
		roots.z = c2_over_3 - rho * (cos_theta - s_sqrt3 * sin_theta);
		
		if (roots.x >= roots.y)
			swap(roots.x, roots.y);

		if (roots.y >= roots.z)
		{
			swap(roots.y, roots.z);

			if (roots.x >= roots.y) {
				swap(roots.x, roots.y);
			}
		}
		if (roots.x <= 0) 
			computeRoots2(c2, c1, roots);
	}

}


vec3 unitOrthogonal(const vec3 src)
{
	vec3 perp;
	//x!=0 || y!=0
	if (!(src.x == 0) || !(src.y == 0))
	{
		float invnm = inversesqrt(src.x * src.x + src.y * src.y);
		perp.x = -src.y * invnm;
		perp.y = src.x * invnm;
		perp.z = 0.0f;
	}
	// x==0&&y==0
	else
	{
		float invnm = inversesqrt(src.z * src.z + src.y * src.y);
		perp.x = 0.0f;
		perp.y = -src.z * invnm;
		perp.z = src.y * invnm;
	}

	return perp;
}

float m00(float matrix[6])  { return matrix[0]; }
float m01(float matrix[6])  { return matrix[1]; }
float m02(float matrix[6])  { return matrix[2]; }
float m10(float matrix[6])  { return matrix[1]; }
float m11(float matrix[6])  { return matrix[3]; }
float m12(float matrix[6])  { return matrix[4]; }
float m20(float matrix[6])  { return matrix[2]; }
float m21(float matrix[6])  { return matrix[4]; }
float m22(float matrix[6])  { return matrix[5]; }

vec3 row0(float matrix[6])  { return vec3(m00(matrix), m01(matrix), m02(matrix)); }
vec3 row1(float matrix[6])  { return vec3(m10(matrix), m11(matrix), m12(matrix)); }
vec3 row2(float matrix[6])  { return vec3(m20(matrix), m21(matrix), m22(matrix)); }

vec3 compute(float matrix[6],mat3 tmp, mat3 vec_tmp, mat3 evecs, vec3 evals)
{

	float max01 = max(abs(matrix[0]), abs(matrix[1]));
	float max23 = max(abs(matrix[2]), abs(matrix[3]));
	float max45 = max(abs(matrix[4]), abs(matrix[5]));
	float m0123 = max(max01, max23);
	float scale = max(max45, m0123);

	if (scale <= 0)
		scale = 1.f;

	matrix[0] /= scale;
	matrix[1] /= scale;
	matrix[2] /= scale;
	matrix[3] /= scale;
	matrix[4] /= scale;
	matrix[5] /= scale;
	
	float c0 = m00(matrix) * m11(matrix) * m22(matrix)
		+ 2.f * m01(matrix) * m02(matrix) * m12(matrix)
		- m00(matrix) * m12(matrix) * m12(matrix)
		- m11(matrix) * m02(matrix) * m02(matrix)
		- m22(matrix) * m01(matrix) * m01(matrix);
	float c1 = m00(matrix) * m11(matrix) -
		m01(matrix) * m01(matrix) +
		m00(matrix) * m22(matrix) -
		m02(matrix) * m02(matrix) +
		m11(matrix) * m22(matrix) -
		m12(matrix) * m12(matrix);
	float c2 = m00(matrix) + m11(matrix) + m22(matrix);
	// x^3 - c2*x^2 + c1*x - c0 = 0
	computeRoots3(c0, c1, c2, evals);
	

	if (evals.x == evals.z)
	{
		evecs[0] = vec3(1.f, 0.f, 0.f);
		evecs[1] = vec3(0.f, 1.f, 0.f);
		evecs[2] = vec3(0.f, 0.f, 1.f);
	}

	else if (evals.x == evals.y)
	{
		// first and second equal                
		tmp[0] = row0(matrix);  tmp[1] = row1(matrix);  tmp[2] = row2(matrix);
		tmp[0].x -= evals.z; tmp[1].y -= evals.z; tmp[2].z -= evals.z;

		vec_tmp[0] = cross(tmp[0], tmp[1]);
		vec_tmp[1] = cross(tmp[0], tmp[2]);
		vec_tmp[2] = cross(tmp[1], tmp[2]);

		float len1 = dot(vec_tmp[0], vec_tmp[0]);
		float len2 = dot(vec_tmp[1], vec_tmp[1]);
		float len3 = dot(vec_tmp[2], vec_tmp[2]);

		if (len1 >= len2 && len1 >= len3)
		{
			evecs[2] = vec_tmp[0] * inversesqrt(len1);
		}
		else if (len2 >= len1 && len2 >= len3)
		{
			evecs[2] = vec_tmp[1] * inversesqrt(len2);
		}
		else
		{
			evecs[2] = vec_tmp[2] * inversesqrt(len3);
		}

		evecs[1] = unitOrthogonal(evecs[2]);
		evecs[0] = cross(evecs[1], evecs[2]);

	}

	else if (evals.z == evals.y)
	{
		// second and third equal                                    
		tmp[0] = row0(matrix);  tmp[1] = row1(matrix);  tmp[2] = row2(matrix);

		tmp[0].x -= evals.x; tmp[1].y -= evals.x; tmp[2].z -= evals.x;

		vec_tmp[0] = cross(tmp[0], tmp[1]);
		vec_tmp[1] = cross(tmp[0], tmp[2]);
		vec_tmp[2] = cross(tmp[1], tmp[2]);

		float len1 = dot(vec_tmp[0], vec_tmp[0]);
		float len2 = dot(vec_tmp[1], vec_tmp[1]);
		float len3 = dot(vec_tmp[2], vec_tmp[2]);

		if (len1 >= len2 && len1 >= len3)
		{
			evecs[0] = vec_tmp[0] * inversesqrt(len1);
		}
		else if (len2 >= len1 && len2 >= len3)
		{
			evecs[0] = vec_tmp[1] * inversesqrt(len2);
		}
		else
		{
			evecs[0] = vec_tmp[2] * inversesqrt(len3);
		}

		evecs[1] = unitOrthogonal(evecs[0]);
		evecs[2] = cross(evecs[0], evecs[1]);
	}

	else
	{

		tmp[0] = row0(matrix);  tmp[1] = row1(matrix);  tmp[2] = row2(matrix);
		tmp[0].x -= evals.z; tmp[1].y -= evals.z; tmp[2].z -= evals.z;

		vec_tmp[0] = cross(tmp[0], tmp[1]);
		vec_tmp[1] = cross(tmp[0], tmp[2]);
		vec_tmp[2] = cross(tmp[1], tmp[2]);

		float len1 = dot(vec_tmp[0], vec_tmp[0]);
		float len2 = dot(vec_tmp[1], vec_tmp[1]);
		float len3 = dot(vec_tmp[2], vec_tmp[2]);

		float mmax[3];

		int min_el = 2;
		int max_el = 2;
		if (len1 >= len2 && len1 >= len3)
		{
			mmax[2] = len1;
			evecs[2] = vec_tmp[0] * inversesqrt(len1);
		}
		else if (len2 >= len1 && len2 >= len3)
		{
			mmax[2] = len2;
			evecs[2] = vec_tmp[1] * inversesqrt(len2);
		}
		else
		{
			mmax[2] = len3;
			evecs[2] = vec_tmp[2] * inversesqrt(len3);
		}

		tmp[0] = row0(matrix);  tmp[1] = row1(matrix);  tmp[2] = row2(matrix);
		tmp[0].x -= evals.y; tmp[1].y -= evals.y; tmp[2].z -= evals.y;

		vec_tmp[0] = cross(tmp[0], tmp[1]);
		vec_tmp[1] = cross(tmp[0], tmp[2]);
		vec_tmp[2] = cross(tmp[1], tmp[2]);

		len1 = dot(vec_tmp[0], vec_tmp[0]);
		len2 = dot(vec_tmp[1], vec_tmp[1]);
		len3 = dot(vec_tmp[2], vec_tmp[2]);

		if (len1 >= len2 && len1 >= len3)
		{
			mmax[1] = len1;
			evecs[1] = vec_tmp[0] * inversesqrt(len1);
			min_el = len1 <= mmax[min_el] ? 1 : min_el;
			max_el = len1 > mmax[max_el] ? 1 : max_el;
		}
		else if (len2 >= len1 && len2 >= len3)
		{
			mmax[1] = len2;
			evecs[1] = vec_tmp[1] * inversesqrt(len2);
			min_el = len2 <= mmax[min_el] ? 1 : min_el;
			max_el = len2 > mmax[max_el] ? 1 : max_el;
		}
		else
		{
			mmax[1] = len3;
			evecs[1] = vec_tmp[2] * inversesqrt(len3);
			min_el = len3 <= mmax[min_el] ? 1 : min_el;
			max_el = len3 > mmax[max_el] ? 1 : max_el;
		}

		tmp[0] = row0(matrix);  tmp[1] = row1(matrix);  tmp[2] = row2(matrix);
		tmp[0].x -= evals.x; tmp[1].y -= evals.x; tmp[2].z -= evals.x;

		vec_tmp[0] = cross(tmp[0], tmp[1]);
		vec_tmp[1] = cross(tmp[0], tmp[2]);
		vec_tmp[2] = cross(tmp[1], tmp[2]);

		len1 = dot(vec_tmp[0], vec_tmp[0]);
		len2 = dot(vec_tmp[1], vec_tmp[1]);
		len3 = dot(vec_tmp[2], vec_tmp[2]);


		if (len1 >= len2 && len1 >= len3)
		{
			mmax[0] = len1;
			evecs[0] = vec_tmp[0] * inversesqrt(len1);
			min_el = len3 <= mmax[min_el] ? 0 : min_el;
			max_el = len3 > mmax[max_el] ? 0 : max_el;
		}
		else if (len2 >= len1 && len2 >= len3)
		{
			mmax[0] = len2;
			evecs[0] = vec_tmp[1] * inversesqrt(len2);
			min_el = len3 <= mmax[min_el] ? 0 : min_el;
			max_el = len3 > mmax[max_el] ? 0 : max_el;
		}
		else
		{
			mmax[0] = len3;
			evecs[0] = vec_tmp[2] * inversesqrt(len3);
			min_el = len3 <= mmax[min_el] ? 0 : min_el;
			max_el = len3 > mmax[max_el] ? 0 : max_el;
		}

		int mid_el = 3 - min_el - max_el;
		evecs[min_el] = normalize(cross(evecs[(min_el + 1) % 3], evecs[(min_el + 2) % 3]));
		evecs[mid_el] = normalize(cross(evecs[(mid_el + 1) % 3], evecs[(mid_el + 2) % 3]));

	}
	evals *= scale;
	return evecs[0];
}

struct payload_t
{
    vec3 query;
    int foundNeighbors;
    float maxDistElemf;
	int optixIndices[maxresult];
};

struct Ray {
    vec3 origin;  
    vec3 direction;  
};

struct AABB {
    vec3 min;  
    vec3 max;  
};

void main(){
	uint idx = gl_GlobalInvocationID.x;
	payload_t Query;
	Query.query=queries[idx];
	Query.foundNeighbors=0;
	Query.maxDistElemf=radius;
	vec3 arbitraryDirection = vec3(1.e-16f);

	Ray queryRay;
	queryRay.origin = Query.query;
	queryRay.direction = arbitraryDirection;

	rayQueryEXT rayQuery;
	rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsNoneEXT, 0xFF, queryRay.origin, 0.00, queryRay.direction,0.0);
	int primitiveID;
	float dist;
	while (rayQueryProceedEXT(rayQuery)) {
		if (rayQueryGetIntersectionTypeEXT(rayQuery,false) == gl_RayQueryCandidateIntersectionAABBEXT) {

			int primitiveID=rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, false);
			
			if(distance(Query.query, points[primitiveID])<Query.maxDistElemf){
				Query.optixIndices[Query.foundNeighbors] =primitiveID;
				++Query.foundNeighbors;
			}
		}
	}
	if (Query.foundNeighbors >= 3)
	{
		vec3 cenpoint = vec3(0.f, 0.f, 0.f);
		for (int i = 0; i <Query.foundNeighbors; ++i)
			cenpoint = cenpoint + points[Query.optixIndices[i]];
		vec3 center = cenpoint /Query.foundNeighbors;
		//23.5ms
			
		vec3 dpoint=vec3(0.0,0.0,0.0);
		float dx2 = 0, dxy = 0, dxz = 0, dy2 = 0, dyz = 0, dz2 = 0;
		vec3  d;
		for (int i = 0; i < Query.foundNeighbors; i++) {
			dpoint = points[Query.optixIndices[i]];
			d = dpoint - center;
			dx2 += d.x * d.x;  dxy += d.x * d.y;
			dxz += d.x * d.z;  dy2 += d.y * d.y;
			dyz += d.y * d.z;  dz2 += d.z * d.z;
		}
		float matrix[6];
		matrix[0] = dx2;
		matrix[1] = dxy;
		matrix[2] = dxz;
		matrix[3] = dy2;
		matrix[4] = dyz;
		matrix[5] = dz2;

		mat3 tmp,vec_tmp,evecs;
		vec3 evals;
		normals[idx]=compute(matrix,tmp, vec_tmp, evecs, evals);
		vec3 normal=compute(matrix,tmp, vec_tmp, evecs, evals);
		if (length(normal) > 0.5f)
			Query.query = Query.query + normal * dot(normal, center - queryRay.origin);
		//36.5ms
			
		if (order > 1)
		{
			vec3 plane_normal = normal;
			vec3 v_axis = unitOrthogonal(plane_normal);
			vec3 u_axis = cross(plane_normal, v_axis);
			float search_radius = Query.maxDistElemf;

			int num_neighbors = Query.foundNeighbors;
			if (order > 1)
			{

				if (num_neighbors >= nr_coeff)
				{
					float weight_vec[maxresult];
					float P[nr_coeff * maxresult];
					float f_vec[maxresult];
					for(int i=0;i<nr_coeff*nr_coeff;i++) P_weight_Pt[i]=0;
					vec3 de_meaned[maxresult];
					for (int ni = 0; ni < num_neighbors; ++ni)
					{
						de_meaned[ni] = points[Query.optixIndices[ni]]- Query.query;
						weight_vec[ni] = weight_func(dot(de_meaned[ni], de_meaned[ni]), search_radius);
					}
						
						
					for (int ni = 0; ni < num_neighbors; ++ni)
					{
							
						const float u_coord = dot(de_meaned[ni], u_axis);
						const float v_coord = dot(de_meaned[ni], v_axis);
						f_vec[ni] = dot(de_meaned[ni], plane_normal);
							
						int j = 0;
						float u_pow = 1;
						for (int ui = 0; ui <= order; ++ui)
						{
							float v_pow = 1;
							for (int vi = 0; vi <= order - ui; ++vi, j++)
							{
								P[j * maxresult + ni] = u_pow * v_pow;
								v_pow *= v_coord;
							}
							u_pow *= u_coord;
						}
					}
							
					float P_weight[nr_coeff * maxresult];
					for (int i = 0; i < nr_coeff; i++)
						for (int j = 0; j < num_neighbors; j++)
							P_weight[i * maxresult + j] = P[i * maxresult + j] * weight_vec[j];
						
					for (int i = 0; i < nr_coeff; i++)
						for (int j = 0; j < nr_coeff; j++)
							for(int k = 0;k <num_neighbors;k++)
								P_weight_Pt[i * nr_coeff + j] += P_weight[i * maxresult + k] * P[j * maxresult + k]; 

					for(int i=0;i<nr_coeff;i++)c_vec[i]=0;
					for (int i = 0; i < nr_coeff; i++)
						for (int j = 0; j < num_neighbors; j++)
								c_vec[i] += P_weight[i * maxresult + j] * f_vec[j];

					initSymmetricMatrix(nr_coeff);
					bool isllt=llt();
					if(isllt){
						solveInPlace();
						Query.query = Query.query + (normal * c_vec[0]);
						vec3 proj_normal = plane_normal - u_axis * c_vec[order + 1] - v_axis * c_vec[1];
						proj_normal=normalized(proj_normal);
						normal = proj_normal;
					}
				}
			}		
		}
		normals[idx]=normal;
	}
}