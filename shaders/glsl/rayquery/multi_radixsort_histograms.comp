#version 460
#extension GL_GOOGLE_include_directive: enable

#define WORKGROUP_SIZE 256 // assert WORKGROUP_SIZE >= RADIX_SORT_BINS
#define RADIX_SORT_BINS 256
#extension GL_EXT_scalar_block_layout : enable

layout (local_size_x = WORKGROUP_SIZE) in;

layout (push_constant) uniform PushConstants {
    uint g_num_elements;
    uint g_shift;
    uint g_num_workgroups;
    uint g_num_blocks_per_workgroup;
};

layout (binding = 0) buffer elements_in {
    uint g_elements_in[];
};

layout (std430, set = 0, binding = 1) buffer histograms {
    // [histogram_of_workgroup_0 | histogram_of_workgroup_1 | ... ]
    uint g_histograms[]; // |g_histograms| = RADIX_SORT_BINS * #WORKGROUPS
};

layout(binding = 2, scalar) buffer PointBuffer {
   vec3 queries[];
};

layout (binding = 3, scalar) buffer maxpoint {
    vec3 max;
};

layout (binding = 4, scalar) buffer minpoint {
    vec3 min;
};

shared uint[RADIX_SORT_BINS] histogram;

// Morton utility functions
uint spreadBits(uint x, uint offset) {
    x = (x | (x << 10)) & 0x000f801f; // ............98765..........43210
    x = (x | (x << 4))  & 0x00e181c3; // ........987....56......432....10
    x = (x | (x << 2))  & 0x03248649; // ......98..7..5..6....43..2..1..0
    x = (x | (x << 2))  & 0x09249249; // ....9..8..7..5..6..4..3..2..1..0
    return x << offset;
}

void computeMortonCodes(uint gID) {
	if(gID<g_num_elements){
		vec3 position = queries[gID];
		uint depth_mult = 1 << 10;
		vec3 dims=max-min;
		uint cell_x = uint(clamp(floor(depth_mult * (position.x - min.x) / dims.x), 0.0, depth_mult - 1.0));
		uint cell_y = uint(clamp(floor(depth_mult * (position.y - min.y) / dims.y), 0.0, depth_mult - 1.0));
		uint cell_z = uint(clamp(floor(depth_mult * (position.z - min.z) / dims.z), 0.0, depth_mult - 1.0));
		uint mortonCode = spreadBits(cell_x, 0) | spreadBits(cell_y, 1) | spreadBits(cell_z, 2);
		g_elements_in[gID]= mortonCode;
	}
}

void main() {
    uint gID = gl_GlobalInvocationID.x;
    uint lID = gl_LocalInvocationID.x;
    uint wID = gl_WorkGroupID.x;
    // initialize histogram
    if (lID < RADIX_SORT_BINS) {
        histogram[lID] = 0U;
    }
    barrier();

    for (uint index = 0; index < g_num_blocks_per_workgroup; index++) {
        uint elementId = wID * g_num_blocks_per_workgroup * WORKGROUP_SIZE + index * WORKGROUP_SIZE + lID;
        if (elementId < g_num_elements) {
            // determine the bin
            if(g_shift==0){
                computeMortonCodes(elementId);
            }
            const uint bin = uint(g_elements_in[elementId] >> g_shift) & uint(RADIX_SORT_BINS - 1);
            // increment the histogram
            atomicAdd(histogram[bin], 1U);
        }
    }
    barrier();

    if (lID < RADIX_SORT_BINS) {
        g_histograms[RADIX_SORT_BINS * wID + lID] = histogram[lID];
    }
}