#version 460
#extension GL_GOOGLE_include_directive: enable
#extension GL_KHR_shader_subgroup_basic: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_EXT_scalar_block_layout : enable

#define WORKGROUP_SIZE 256// assert WORKGROUP_SIZE >= RADIX_SORT_BINS
#define RADIX_SORT_BINS 256
#define SUBGROUP_SIZE 32// 

layout (local_size_x = WORKGROUP_SIZE) in;

layout (push_constant, std430) uniform PushConstants {
    uint g_num_elements;
    uint g_shift;
    uint g_num_workgroups;
    uint g_num_blocks_per_workgroup;
};

layout (binding = 0) buffer elements_in {
    uint g_elements_in[];
};

layout (binding = 1) buffer elements_out {
    uint g_elements_out[];
};

layout (binding = 2) buffer histograms {
// [histogram_of_workgroup_0 | histogram_of_workgroup_1 | ... ]
    uint g_histograms[];// |g_histograms| = RADIX_SORT_BINS * #WORKGROUPS = RADIX_SORT_BINS * g_num_workgroups
};

layout(binding = 3, scalar) buffer queries_inbuffer {
   vec3 queries_in[];
};

layout(binding = 4, scalar) buffer queries_outbuffer {
   vec3 queries_out[];
};

shared uint[RADIX_SORT_BINS / SUBGROUP_SIZE] sums;// 表示g_histograms每32个线程的和
shared uint[RADIX_SORT_BINS] global_offsets;// 表示每个桶的前缀和

struct BinFlags {
    uint flags[WORKGROUP_SIZE / 32];
};
shared BinFlags[RADIX_SORT_BINS] bin_flags;//将一个工作组中的所有key值用uint字节的每一位进行标识，表示该位是否被占用

void main() {
    uint gID = gl_GlobalInvocationID.x;   
    uint lID = gl_LocalInvocationID.x;
    uint wID = gl_WorkGroupID.x;
    uint sID = gl_SubgroupID;
    uint lsID = gl_SubgroupInvocationID;
        
    uint local_histogram = 0;
    uint prefix_sum = 0;
    uint histogram_count = 0;
    //这里首先将所有局部直方图的和计算到0~255中，然后sum[i]表示32个桶的和，prefix_sum表示在sum中桶的前缀和
    //local_histogram则表示在该桶中，每个工作组的前缀和
    if (lID < RADIX_SORT_BINS) {
        uint count = 0;
        for (uint j = 0; j < g_num_workgroups; j++) {
            const uint t = g_histograms[RADIX_SORT_BINS * j + lID];
            local_histogram = (j == wID) ? count : local_histogram;//仅仅表示按照第wID桶的前缀和
            count += t;//表示第wld桶的总和
        }
        histogram_count = count;
        const uint sum = subgroupAdd(histogram_count);//每32个桶的总和
        prefix_sum = subgroupExclusiveAdd(histogram_count);//在自己的工作块中（一共有RADIX_SORT_BINS / SUBGROUP_SIZE个工作块），第lsID个桶的前缀和
        if (subgroupElect()) {
            // one thread inside the warp/subgroup enters this section
            sums[sID] = sum;
        }
    }
    barrier();

    //global_offsets[lID]则表示lID在全局索引中的前缀和
    if (lID < RADIX_SORT_BINS) {
        const uint sums_prefix_sum = subgroupBroadcast(subgroupExclusiveAdd(sums[lsID]), sID);//计算的是按照第lsID个（32个桶）的前缀和
        const uint global_histogram = sums_prefix_sum + prefix_sum;//计算桶的全局前缀和，每个工作组都一样
        global_offsets[lID] = global_histogram + local_histogram;  //计算key值的前缀和，每个工作组中的都不一样
    }

    //     ==== scatter keys according to global offsets =====
    const uint flags_bin = lID / 32;
    const uint flags_bit = 1 << (lID % 32);
    
    for (uint index = 0; index < g_num_blocks_per_workgroup; index++) {
        uint elementId = wID * g_num_blocks_per_workgroup * WORKGROUP_SIZE + index * WORKGROUP_SIZE + lID;

        // initialize bin flags
        if (lID < RADIX_SORT_BINS) {
            for (int i = 0; i < WORKGROUP_SIZE / 32; i++) {
                bin_flags[lID].flags[i] = 0U;// init all bin flags to 0
            }
        }
        barrier();

        uint element_in = 0;
        uint binID = 0;
        uint binOffset = 0;
		vec3 index_in;
        if (elementId < g_num_elements) {
            element_in = g_elements_in[elementId];
			index_in=queries_in[elementId];
            binID = uint(element_in >> g_shift) & uint(RADIX_SORT_BINS - 1);
            // offset for group
            binOffset = global_offsets[binID];
            // add bit to flag
            atomicAdd(bin_flags[binID].flags[flags_bin], flags_bit);//binID表示桶的编号一样，然后flags_bit可以看做处理哈希冲突的方法，将该位标记上，这里哈希冲突已经使得工作组每一个线程都有固定的位置，不会出现抢位置的现象（因为flags_bin和flags_bit能唯一确定工作组的一个数）
        }
        barrier();

        if (elementId < g_num_elements) {
            // calculate output index of element
            uint prefix = 0;
            uint count = 0;
            for (uint i = 0; i < WORKGROUP_SIZE / 32; i++) {
                const uint bits = bin_flags[binID].flags[i];
                const uint full_count = bitCount(bits);
                const uint partial_count = bitCount(bits & (flags_bit - 1));//flags_bit - 1使得flags_bit后面位数全部为1，前面全为0，与bits&的结果便是在该elementId之前的值，因为在elementId之前的值一定小于elementId
                prefix += (i < flags_bin) ? full_count : 0U;// bin_flags把每个桶分成 32*WORKGROUP_SIZE / 32的数，flags_bin代表层数，所以需要把比flags_bin小的（也就是前面那几层）假期来
                prefix += (i == flags_bin) ? partial_count : 0U;//把flags_bin这一层的加上
                count += full_count;
            }
            g_elements_out[binOffset + prefix] =element_in;
            queries_out[binOffset + prefix] =index_in;
            if (prefix == count - 1) {
                atomicAdd(global_offsets[binID], count);//for循环全局偏移量的修改，如果没有for循环，可以删除。
            }
        }

        barrier();
    }
     
}